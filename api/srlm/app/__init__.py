"""
Welcome to the Slapshot: Rebound League Manager API

# Overview

This project is a database and API tool designed to help store data and manage the competitive leagues for the
Slapshot: Rebound Community.
The desired goal for the project is to have a complete tool for all the different leagues (OSL, SPL, EUSL) to have a
single, uniform database and API toolbox to track matches, teams, players and stats, as well as provide historical data
that has been ported over from the spreadsheet days.
As this is being built as a REST API, the idea is that it will be able to be used by multiple front-end websites or discord bots
so can be easily integrating into the existing community sites/projects.

Currently, the list of features is:
 - Manage Leagues (i.e. regions)
 - Manage Seasons and Divisions
 - Manage Players and Teams
 - Create matches between teams (linked to a season)
 - Create lobbies for matches
 - Automatic stat retrieval for lobbies
 - Automatic stat validation
 - User registration
 - Match review system
 - Link user account to players

Planned features:
 - Manage finals fixtures
 - Awards
 - Match scheduling
 - Web relay for discord notification/news bots


# Endpoints

## Dates and Times

Note that all dates and times generated by the API are in UTC+0 timezone, and various features rely on this fact to
work accurately. To prevent errors, please use UTC+0 when submitting dates/times to the API and handle the timezone
conversion on the client side.

## Caching

Most GET requests have response caching of 5 minutes to prevent overloading. To force a refresh, include query
`cached=False` in your request (i.e. /api/players?cached=False).
Values `false`, `No` and `no` also work for this override.

## Rate Limits

The API has a global rate limit of 50 requests per minute. Request Headers carry information on the rate limiting.
"""

from flask import Flask
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_login import LoginManager
from flask_marshmallow import Marshmallow
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_mail import Mail
from apifairy import APIFairy
from flask_caching import Cache
from flask_cors import CORS

from api.srlm.app.celery import make_celery
from api.srlm.logger import get_logger
from api.srlm.app.config import Config


log = get_logger(__name__)

db = SQLAlchemy()
migrate = Migrate()
login = LoginManager()
mail = Mail()
api_fairy = APIFairy()
ma = Marshmallow()
cache = Cache()
cors = CORS()


limiter = Limiter(get_remote_address)


def create_app(config_class=Config):
    """This is where the main web-app is defined and made available to the runtime environment"""
    # Starting web app and loading config
    log.info('Instantiating Flask web app')
    log.info('Starting app')
    app = Flask(__name__)
    log.info('Loading app config')
    app.config.from_object(config_class)
    if app.config['DEBUG']:
        app.config["TEMPLATES_AUTO_RELOAD"] = True

    # Setting up app modules
    log.info('Starting database connection and setting up modules')
    db.init_app(app)
    migrate.init_app(app, db)
    login.init_app(app)
    mail.init_app(app)
    api_fairy.init_app(app)
    ma.init_app(app)
    cache.init_app(app)
    limiter.init_app(app)
    cors.init_app(app)

    celery_app = make_celery(app)
    celery_app.set_default()

    # Registering blueprints
    log.info('Registering blueprints')
    from api.srlm.app.api import bp as api_bp

    app.register_blueprint(api_bp, url_prefix='/api')

    if not app.debug and not app.testing:
        # only runs when app not in debug or testing mode
        app.logger = log
        pass  # temporary while function is empty

    log.info('Web app instantiated')
    return app, celery_app


from api.srlm.app import models, events
from api.srlm.api_access import models  # noqa
